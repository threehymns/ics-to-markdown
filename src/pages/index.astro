---
import Layout from '../layouts/Layout.astro';
import DropZone from '../components/DropZone.astro';
import FileUpload from '../components/FileUpload.astro';
import ConvertButton from '../components/ConvertButton.astro';
import Results from '../components/Results.astro';
---

<Layout title="ICS to Markdown">
  <DropZone />
  <div class="container mx-auto px-4">
    <div class="mt-20 flex justify-center">
      <svg class="size-40" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><rect width="14" height="0" x="5" y="5" fill="currentColor"><animate fill="freeze" attributeName="height" begin="0.6s" dur="0.2s" values="0;3"/></rect><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path stroke-dasharray="64" stroke-dashoffset="64" d="M12 4h7c0.55 0 1 0.45 1 1v14c0 0.55 -0.45 1 -1 1h-14c-0.55 0 -1 -0.45 -1 -1v-14c0 -0.55 0.45 -1 1 -1Z"><animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0"/></path><path stroke-dasharray="4" stroke-dashoffset="4" d="M7 4v-2M17 4v-2"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.6s" dur="0.2s" values="4;0"/></path><path stroke-dasharray="12" stroke-dashoffset="12" d="M7 11h10"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.2s" values="12;0"/></path><path stroke-dasharray="8" stroke-dashoffset="8" d="M7 15h7"><animate fill="freeze" attributeName="stroke-dashoffset" begin="1s" dur="0.2s" values="8;0"/></path></g></svg>
      <svg class="size-40" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><path stroke-dasharray="16" stroke-dashoffset="16" d="M5 12h13.5"><animate fill="freeze" attributeName="stroke-dashoffset" dur="0.2s" values="16;0"/></path><path stroke-dasharray="10" stroke-dashoffset="10" d="M19 12l-5 5M19 12l-5 -5"><animate fill="freeze" attributeName="stroke-dashoffset" begin="0.2s" dur="0.2s" values="10;0"/></path></g></svg>
      
      <svg class="size-40" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <!-- <path fill="red" d="m15.25 12.125l-.675-.675q-.225-.225-.525-.213t-.525.238T13.3 12t.225.525L15.3 14.3q.3.3.7.3t.7-.3l1.775-1.775Q18.7 12.3 18.7 12t-.225-.525t-.538-.225t-.537.225l-.65.65V9.75q0-.325-.213-.537T16 9t-.537.213t-.213.537zM4 20q-.825 0-1.412-.587T2 18V6q0-.825.588-1.412T4 4h16q.825 0 1.413.588T22 6v12q0 .825-.587 1.413T20 20zm0-2h16V6H4zm0 0V6zm3-7.5h1v2.25q0 .325.213.538t.537.212t.538-.213t.212-.537V10.5h1v3.75q0 .325.213.538t.537.212t.538-.213t.212-.537V10q0-.425-.288-.712T11 9H6.5q-.425 0-.712.288T5.5 10v4.25q0 .325.213.538T6.25 15t.538-.213T7 14.25z"/> -->
        <g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2">
          <path stroke-dasharray="64" stroke-dashoffset="64" d="M13 5h7c0.55 0 1 0.45 1 1v12c0 0.55 -0.45 1 -1 1h-16c-0.55 0 -1 -0.45 -1 -1v-12c0 -0.55 0.45 -1 1 -1Z">
            <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="64;0"/>    <!-- rectangle -->
          </path>
          <path stroke-dasharray="4" stroke-dashoffset="4" stroke-width="1.5" d="M8.75 10v3">
            <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.7s" dur="0.3s" values="4;0"/>    <!-- M centerpost -->
          </path>
          <path stroke-dasharray="16" stroke-dashoffset="16" stroke-width="1.5" d="M6.25 14.25v-4.5h5v4.5">
            <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.4s" dur="0.4s" values="16;0"/>    <!-- M -->
          </path>
          <path stroke-dasharray="8" stroke-dashoffset="8" stroke-width="1.5" d="M16 9.75v4.25L14 12M16 14L18 12">
            <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.8s" dur="0.4s" values="8;0"/>    <!-- arrow -->
          </path>
        </g>
      </svg>

    </div>
    <h1 class="text-4xl font-bold text-center my-20 text-emerald-400"><code class="bg-slate-800 rounded px-1">ICS</code> to <code class="bg-slate-800 rounded px-1">Markdown</code> Converter</h1>
    <div class="max-w-lg mx-auto bg-gray-800 rounded-xl shadow-lg p-10">
      <p class="text-center text-sm mb-10 max-w-lg mx-auto">
        Easily import your events and schedules into your <a href="https://obsidian.md/" class="text-emerald-300">Obsidian</a> vault. 
        <br>
        Convert your ICS calendar files into Markdown format for use with the <a href="https://github.com/obsidian-community/obsidian-full-calendar" class="text-emerald-300">Obsidian Full Calendar plugin.</a> 
      </p>
      <FileUpload />
      <ConvertButton />
    </div>
    <Results />
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const fileInput = document.getElementById('icsFile');
      const fileLabel = document.querySelector('label[for="icsFile"]');
      const dropZone = document.getElementById('dropZone');
      const body = document.body;

      function showDropZone() {
        dropZone.classList.remove('pointer-events-none', 'opacity-0');
        dropZone.classList.add('opacity-100');
      }

      function hideDropZone() {
        dropZone.classList.remove('opacity-100');
        dropZone.classList.add('pointer-events-none', 'opacity-0');
      }

      function handleDrop(e) {
        e.preventDefault();
        hideDropZone();

        if (e.dataTransfer.files.length > 0) {
          const file = e.dataTransfer.files[0];
          fileInput.files = e.dataTransfer.files;
          fileLabel.textContent = file.name;

          // Automatically convert the file
          convertICS(file);
        }
      }

      let dragCounter = 0;

      function handleDragEnter(e) {
        e.preventDefault();
        dragCounter++;
        showDropZone();
      }

      function handleDragLeave(e) {
        e.preventDefault();
        dragCounter--;
        if (dragCounter === 0) {
          hideDropZone();
        }
      }

      body.addEventListener('dragenter', handleDragEnter);
      body.addEventListener('dragleave', handleDragLeave);
      body.addEventListener('drop', (e) => {
        dragCounter = 0;
        handleDrop(e);
      });
      dropZone.addEventListener('dragover', (e) => e.preventDefault());
      dropZone.addEventListener('drop', handleDrop);

      fileInput.addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
          fileLabel.textContent = e.target.files[0].name;
        } else {
          fileLabel.textContent = 'Drop or Select ICS File';
        }
      });

      fileLabel.addEventListener('dragenter', (e) => {
        e.stopPropagation();
        showDropZone();
      });

      fileLabel.addEventListener('dragleave', (e) => {
        e.stopPropagation();
      });

      function convertICS(file) {
        if (!file) {
          file = document.getElementById("icsFile").files[0];
        }

        if (!file) {
          document.getElementById("results").innerHTML = "<p>Please select an ICS file.</p>";
          return;
        }

        const reader = new FileReader();
        reader.onload = function(e) {
          const icsData = e.target.result;
          const events = parseICS(icsData);
          generateMarkdownFiles(events);
        };
        reader.onerror = function(e) {
          console.error("Error reading file:", e);
          document.getElementById("results").innerHTML = "<p>Error reading the ICS file. Please try again.</p>";
        };
        reader.readAsText(file);
      }

      const convertButton = document.getElementById('convertButton');
      convertButton.addEventListener('click', () => convertICS());
    });

    function formatTime(timeString) {
      const hours = timeString.slice(0, 2);
      const minutes = timeString.slice(2, 4);
      return `${hours}:${minutes}`;
    }

    function parseICS(icsData) {
      const events = [];
      const lines = icsData.split("\n");
      let currentEvent = {};
      let capturingTitle = false;

      for (const line of lines) {
        if (line.startsWith("BEGIN:VEVENT")) {
          currentEvent = {};
          capturingTitle = false;
        } else if (line.startsWith("END:VEVENT")) {
          events.push(currentEvent);
          capturingTitle = false;
        } else {
          if (capturingTitle) {
            if (line.startsWith(" ")) {
              currentEvent.title += line.trim();
            } else {
              capturingTitle = false;
            }
          }

          const [key, ...valueParts] = line.split(":");
          const value = valueParts.join(":").trim();

          switch (key.trim()) {
            case "SUMMARY":
              currentEvent.title = value;
              capturingTitle = true;
              break;
            case "DTSTART":
              currentEvent.startTime = formatTime(value.slice(9, 13));
              currentEvent.date = formatDate(value.slice(0, 8));
              break;
            case "DTEND":
              currentEvent.endTime = formatTime(value.slice(9, 13));
              break;
            case "DURATION":
              const duration = value.slice(2);
              const durationHours = parseInt(duration.slice(0, 2), 10);
              const durationMinutes = parseInt(duration.slice(2, 4), 10);
              const startHours = parseInt(currentEvent.startTime.slice(0, 2), 10);
              const startMinutes = parseInt(currentEvent.startTime.slice(3, 5), 10);
              
              let endHours = startHours + durationHours;
              let endMinutes = startMinutes + durationMinutes;
              
              if (endMinutes >= 60) {
                endHours += Math.floor(endMinutes / 60);
                endMinutes %= 60;
              }
              
              endHours %= 24;
              
              currentEvent.endTime = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
              break;
            case "DTSTAMP":
              currentEvent.date = formatDate(value.slice(0, 8));
              break;
            case "RRULE":
              if (value.includes("FREQ=DAILY")) {
                currentEvent.allDay = true;
              }
              break;
          }
        }
      }
      return events;
    }

    function formatDate(dateString) {
      const year = dateString.slice(0, 4);
      const month = dateString.slice(4, 6);
      const day = dateString.slice(6, 8);
      return `${year}-${month}-${day}`;
    }

    function generateMarkdownFiles(events) {
      let markdownFiles = "";
      const zip = new JSZip();

      for (const event of events) {
        const sanitizedTitle = event.title.replace(/[<>:"/\\|?*\x00-\x1F]/g, "").trim();
        const fileName = `${event.date} ${sanitizedTitle}.md`.replace(/\s+/g, " ");
        const markdownContent = `---
title: "${event.title}"
allDay: ${event.allDay ? "true" : "false"}
startTime: ${event.startTime}
endTime: ${event.endTime}
date: ${event.date}\n---`;

        zip.file(fileName, markdownContent);

        const blob = new Blob([markdownContent], { type: "text/markdown" });
        const url = URL.createObjectURL(blob);

        markdownFiles += `
<div class="bg-gray-800 rounded-lg p-4 max-w-xl mx-auto shadow-md opacity-0 transform translate-y-4 transition-all duration-500 ease-out">
  <div class="flex justify-between items-start mb-3">
    <div>
      <p class="text-sm text-emerald-400 mb-1">Created File</p>
      <p class="font-semibold text-gray-400 pr-2">${fileName}</p>
    </div>
    <a href="${url}" download="${fileName}" class="flex-shrink-0 text-emerald-300 hover:text-emerald-400 font-medium py-1 px-2 rounded transition duration-300 ease-in-out">
      <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
      </svg>

    </a>
  </div>
  <pre class="bg-gray-700 p-3 rounded text-sm overflow-x-auto">${markdownContent}</pre>
</div>`;      }

      const downloadAllButton = `
  <button onclick="downloadAllFiles()" class="mb-8 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-8 rounded-full transition duration-300 ease-in-out transform hover:scale-105 shadow-lg flex items-center justify-center mx-auto opacity-0 translate-y-4">
    <svg class="h-6 w-6 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
      <path fill-rule="evenodd" d="M9.75 6.75h-3a3 3 0 0 0-3 3v7.5a3 3 0 0 0 3 3h7.5a3 3 0 0 0 3-3v-7.5a3 3 0 0 0-3-3h-3V1.5a.75.75 0 0 0-1.5 0v5.25Zm0 0h1.5v5.69l1.72-1.72a.75.75 0 1 1 1.06 1.06l-3 3a.75.75 0 0 1-1.06 0l-3-3a.75.75 0 1 1 1.06-1.06l1.72 1.72V6.75Z" clip-rule="evenodd" />
      <path d="M7.151 21.75a2.999 2.999 0 0 0 2.599 1.5h7.5a3 3 0 0 0 3-3v-7.5c0-1.11-.603-2.08-1.5-2.599v7.099a4.5 4.5 0 0 1-4.5 4.5H7.151Z" />
    </svg>

    Download All Files
  </button>`;

      document.getElementById("results").innerHTML = downloadAllButton + markdownFiles;

      // Trigger animations after a short delay
      setTimeout(() => {
        const downloadButton = document.querySelector('#results > button');
        downloadButton.classList.remove('opacity-0', 'translate-y-4');
  
        document.querySelectorAll('#results > div').forEach((el, index) => {
          setTimeout(() => {
            el.classList.remove('opacity-0', 'translate-y-4');
          }, (index + 1) * 100); // +1 to start after the button animation
        });
      }, 50);

      window.eventsZip = zip;
    }

    function downloadAllFiles() {
      window.eventsZip
        .generateAsync({ type: "blob" })
        .then(function (content) {
          const url = URL.createObjectURL(content);
          const link = document.createElement("a");
          link.href = url;
          link.download = "markdown_files.zip";
          link.click();
        });
    }

    function convertICS() {
      const icsFile = document.getElementById("icsFile").files[0];

      if (!icsFile) {
        document.getElementById("results").innerHTML = "<p>Please select an ICS file.</p>";
        return;
      }

      const reader = new FileReader();
      reader.onload = function(e) {
        const icsData = e.target.result;
        const events = parseICS(icsData);
        generateMarkdownFiles(events);
      };
      reader.onerror = function(e) {
        console.error("Error reading file:", e);
        document.getElementById("results").innerHTML = "<p>Error reading the ICS file. Please try again.</p>";
      };
      reader.readAsText(icsFile);
    }

    document.addEventListener('DOMContentLoaded', function() {
      const convertButton = document.getElementById('convertButton');
      convertButton.addEventListener('click', convertICS);
    });
  </script>
</Layout>
